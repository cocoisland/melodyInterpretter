{"ast":null,"code":"var _jsxFileName = \"/home/tt/repo/melodyInterpretter/Front-End/src/components/MelodyApp/index.js\";\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport * as contentful from 'contentful';\nimport MelodyCard from './MelodyCard';\nimport NavBar from './NavBar';\nconst SPACE_ID = 'viwz6ijsgmv0'; //const ACCESS_TOKEN = 'oHtYpNeS0GEfn2ytvKJeBY1heSHNpZSabBXh_Ck-tA0'\n//const SPACE_ID = 'viwz6ijsgmv0'\n\nconst ACCESS_TOKEN = 'w3GgVeFeFLYkCfJCIsHfo0SG44cH4ToUuDpRYM2lMJk';\nconst client = contentful.createClient({\n  space: SPACE_ID,\n  accessToken: ACCESS_TOKEN\n});\n\nclass MelodyApp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      contentFields: [],\n      searchString: ''\n    };\n\n    this.getMusics = () => {\n      client.getEntries({\n        content_type: 'chopin',\n        query: this.state.searchString\n      }).then(response => {\n        this.setState({\n          contentFields: response.items\n        });\n        console.log(this.state.contentFields);\n      }).catch(error => {\n        console.log(\"Error occurred while fetching Entries\");\n        console.error(error);\n      });\n    };\n\n    this.onSearchInputChange = event => {\n      console.log(\"Search changed ...\" + event.target.value);\n\n      if (event.target.value) {\n        this.setState({\n          searchString: event.target.value\n        });\n      } else {\n        this.setState({\n          searchString: ''\n        });\n      }\n\n      this.getMusics();\n    };\n\n    this.getMusics();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), this.state.contentFields ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      style: {\n        padding: 24\n      },\n      id: \"searchInput\",\n      placeholder: \"Search for Musics\",\n      margin: \"normal\",\n      onChange: this.onSearchInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      spacing: 24,\n      style: {\n        padding: 24\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.state.contentFields.map(currentField => React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      lg: 4,\n      xl: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(MelodyCard, {\n      music: currentField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }))))) : \"No musics found\");\n  }\n\n}\n\nexport default MelodyApp;","map":{"version":3,"sources":["/home/tt/repo/melodyInterpretter/Front-End/src/components/MelodyApp/index.js"],"names":["React","Component","Grid","TextField","contentful","MelodyCard","NavBar","SPACE_ID","ACCESS_TOKEN","client","createClient","space","accessToken","MelodyApp","constructor","state","contentFields","searchString","getMusics","getEntries","content_type","query","then","response","setState","items","console","log","catch","error","onSearchInputChange","event","target","value","render","padding","map","currentField"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport * as contentful from 'contentful'\nimport MelodyCard from './MelodyCard'\nimport NavBar from './NavBar'\n\n\nconst SPACE_ID = 'viwz6ijsgmv0'\n//const ACCESS_TOKEN = 'oHtYpNeS0GEfn2ytvKJeBY1heSHNpZSabBXh_Ck-tA0'\n//const SPACE_ID = 'viwz6ijsgmv0'\nconst ACCESS_TOKEN = 'w3GgVeFeFLYkCfJCIsHfo0SG44cH4ToUuDpRYM2lMJk'\nconst client = contentful.createClient({\n    space: SPACE_ID,\n    accessToken: ACCESS_TOKEN\n})\nclass MelodyApp extends Component {\n    state = {\n        contentFields: [],\n        searchString: ''\n    }\n    constructor() {\n        super()\n        this.getMusics()\n    }\n    getMusics = () => {\n        client.getEntries({\n            content_type: 'chopin',\n            query: this.state.searchString\n        })\n        .then((response) => {\n            this.setState({contentFields: response.items})\n            console.log(this.state.contentFields)\n        })\n        .catch((error) => {\n            console.log(\"Error occurred while fetching Entries\")\n            console.error(error)\n          })\n      }\n      onSearchInputChange = (event) => {\n          console.log(\"Search changed ...\" + event.target.value)\n          if (event.target.value) {\n              this.setState({searchString: event.target.value})\n          } else {\n              this.setState({searchString: ''})\n          }\n          this.getMusics()\n      }\n      render() {\n        return (\n            <div>\n            <NavBar></NavBar>\n                { this.state.contentFields ? (\n                    <div>\n                        <TextField style={{padding: 24}}\n                            id=\"searchInput\"\n                            placeholder=\"Search for Musics\"   \n                            margin=\"normal\"\n                            onChange={this.onSearchInputChange}\n                            />\n                        <Grid container spacing={24} style={{padding: 24}}>\n                            { this.state.contentFields.map(currentField => (\n                                <Grid item xs={12} sm={6} lg={4} xl={3}>\n                                    <MelodyCard music={currentField} />\n                                    </Grid>\n                            ))}\n                        </Grid>\n                    </div>\n                ) : \"No musics found\" }\n            </div>\n        )\n    }\n}\nexport default MelodyApp;"]},"metadata":{},"sourceType":"module"}