{"ast":null,"code":"var _jsxFileName = \"/home/tt/repo/melodyInterpretter/Front-End/src/components/MelodyApp/MelodyCard.js\";\nimport React, { Component } from 'react';\nimport Tone from 'tone';\nimport '@tonejs/ui';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport IconButton from '@material-ui/core/IconButton'; //var songC='./scherzo_test_output.mp3'\n//var songB='./ForestGump.mp3'\n//var songA=\"\"\n\nvar player = {};\n\nclass MelodyCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isToggle: true,\n      song: \"\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    console.log('handleclick' + e);\n    this.setState(state => ({\n      isToggle: !state.isToggle\n    }));\n    const play = this.state.isToggle;\n\n    if (play) {\n      player = new Tone.Player(e).toMaster();\n      Tone.Buffer.on('load', () => {\n        player.start();\n      });\n    } else {\n      player.stop();\n    }\n  }\n\n  render() {\n    //const Music = (props) => {\n    //console.log(props)\n    const props = this.props;\n    const currentSong = props.music.fields.musicSong.fields.file.url;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, props.music ? React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(CardMedia, {\n      style: {\n        height: 0,\n        paddingTop: '56.25%'\n      },\n      image: props.music.fields.musicImage.fields.file.url,\n      title: props.music.fields.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      variant: \"headline\",\n      component: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, props.music.fields.title), React.createElement(Typography, {\n      component: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, props.music.fields.description, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), props.music.fields.musicSong.fields.file.url.split('/').pop())), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      color: \"primary\",\n      onClick: () => this.handleClick(currentSong),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.isToggle ? 'Play' : 'Stop'), React.createElement(IconButton, {\n      \"aria-label\": \"Play/pause\",\n      onClick: () => this.handleClick(currentSong),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(PlayArrowIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })))) : null); //  } // Music\n  } // render\n\n\n} // class\n\n\nexport default MelodyCard;","map":{"version":3,"sources":["/home/tt/repo/melodyInterpretter/Front-End/src/components/MelodyApp/MelodyCard.js"],"names":["React","Component","Tone","Card","CardActions","CardContent","CardMedia","Button","Typography","PlayArrowIcon","IconButton","player","MelodyCard","constructor","props","state","isToggle","song","handleClick","bind","e","console","log","setState","play","Player","toMaster","Buffer","on","start","stop","render","currentSong","music","fields","musicSong","file","url","height","paddingTop","musicImage","title","description","split","pop"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport Tone from 'tone';\nimport {} from '@tonejs/ui';\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport IconButton from '@material-ui/core/IconButton';\n \n//var songC='./scherzo_test_output.mp3'\n//var songB='./ForestGump.mp3'\n//var songA=\"\"\nvar player={}\n\nclass MelodyCard extends Component {\nconstructor(props) {\n    super(props);\n    this.state = { \n        isToggle : true ,\n        song : \"\"\n    }\n    \n    this.handleClick = this.handleClick.bind(this);\n}\nhandleClick(e)  {\n    console.log('handleclick'+e)\n    this.setState(state => ({ isToggle: !state.isToggle}));\n    const play = this.state.isToggle;\n\n\n    if ( play ) { \n        player = new Tone.Player(e).toMaster();\n        Tone.Buffer.on('load', () => { player.start() });\n    } else { player.stop() }\n  }\nrender() {\n//const Music = (props) => {\n    //console.log(props)\n    const props = this.props\n    const currentSong = props.music.fields.musicSong.fields.file.url\n\n    return(\n    <div >\n        { props.music ? (\n            <Card >       \n                <CardMedia style={{height: 0, paddingTop: '56.25%'}}\n                                    image={props.music.fields.musicImage.fields.file.url}\n                                    title={props.music.fields.title}\n                                    />\n                    <CardContent>\n                    <Typography gutterBottom variant=\"headline\" component=\"h2\">\n                        {props.music.fields.title}\n                    </Typography>\n                    <Typography component=\"p\">\n                        {props.music.fields.description}<br></br>\n                        {(props.music.fields.musicSong.fields.file.url).split('/').pop()}\n                       \n                    </Typography>\n                    </CardContent>\n                    <CardActions> \n                    {/*<Button size=\"small\" color=\"primary\" href={props.music.fields.url} target=\"_blank\"> */}\n                    <Button size=\"small\" color=\"primary\" onClick={() => this.handleClick(currentSong)} >\n                        {this.state.isToggle ? 'Play' :'Stop' }\n          \n                    </Button>\n\n    <IconButton aria-label=\"Play/pause\" onClick={() => this.handleClick(currentSong)} >\n        <PlayArrowIcon  />\n        </IconButton>\n                    </CardActions>\n                        \n            </Card>\n        ) : null}\n    </div>\n    )\n          //  } // Music\n} // render\n} // class\n\nexport default MelodyCard"]},"metadata":{},"sourceType":"module"}